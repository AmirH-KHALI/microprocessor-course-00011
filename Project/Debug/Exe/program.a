;#include <stdio.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega32.h>
;#include <delay.h>
;#include <alcd.h>
;
;#define ADC_VREF_TYPE ((1<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;char buffer[8];
;int state = 1;
;
;unsigned int read_adc(unsigned char adc_input) {
; 0000 000B unsigned int read_adc(unsigned char adc_input) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000C     ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000D     // Delay needed for the stabilization of the ADC input voltage
; 0000 000E     delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 000F     // Start the AD conversion
; 0000 0010     ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0011     // Wait for the AD conversion to complete
; 0000 0012     while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0013     ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0014     return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0015 }
;PCODE: $00000021 VOL: 0
;
;void cooler_on(int period) {
; 0000 0017 void cooler_on(int period) {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0018             PORTD = 0x09;
;PCODE: $00000024 VOL: 0
;	period -> Y+0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0019             delay_ms(period);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 001A             PORTD = 0x08;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 001B             delay_ms(period);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 001C             PORTD = 0x0C;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 001D             delay_ms(period);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 001E             PORTD = 0x04;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 001F             delay_ms(period);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0020             PORTD = 0x06;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0021             delay_ms(period);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0022             PORTD = 0x02;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0023             delay_ms(period);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0024             PORTD = 0x03;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0025             delay_ms(period);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0026             PORTD = 0x01;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0027             delay_ms(period);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0028 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;
;void heater_on(int period) {
; 0000 002A void heater_on(int period) {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 002B             PORTD = 0x90;
;PCODE: $0000004A VOL: 0
;	period -> Y+0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 002C             delay_ms(period);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 002D             PORTD = 0x80;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 002E             delay_ms(period);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 002F             PORTD = 0xC0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0030             delay_ms(period);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0031             PORTD = 0x40;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0032             delay_ms(period);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0033             PORTD = 0x60;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0034             delay_ms(period);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0035             PORTD = 0x20;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0036             delay_ms(period);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0037             PORTD = 0x30;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0038             delay_ms(period);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0039             PORTD = 0x10;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 003A             delay_ms(period);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 003B }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;
;void main(void) {
; 0000 003D void main(void) {
;PCODE: $0000006E VOL: 0
; 0000 003E     unsigned int adc0;
; 0000 003F 
; 0000 0040     DDRD = 0xFF;
;	adc0 -> R16,R17
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0041     PORTD = 0;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0042     DDRB = 0xFF;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0043 
; 0000 0044     ADMUX = ADC_VREF_TYPE;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0045     ADCSRA = (1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0046     SFIOR = (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0047 
; 0000 0048     delay_ms(100);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0049     lcd_init(16);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 004A 
; 0000 004B     while (1) {
;PCODE: $00000080 VOL: 0
; 0000 004C        adc0 = read_adc(0) / 4;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 004D        PORTB = adc0;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 004E         switch(state){
;PCODE: $00000087 VOL: 0
; 0000 004F             case 1:
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0050 
; 0000 0051                 if(adc0 > 35)
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0052                     state = 2;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0053                 if(adc0 < 15)
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0054                     state = 3;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0055                 break;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0056             case 2:
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0057 
; 0000 0058                 if(adc0 < 25)
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0059                     state = 1;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 005A                 if(adc0 > 40)
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 005B                     state = 4;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 005C                 break;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 005D             case 3:
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 005E 
; 0000 005F                 if(adc0 > 30)
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0060                     state = 1;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0061                 break;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0062             case 4:
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0063 
; 0000 0064               if(adc0 < 35)
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0065                     state = 2;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0066               if(adc0 > 45)
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0067                     state = 5;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0068               break;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0069             case 5:
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 006A 
; 0000 006B               if(adc0 < 40)
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 006C                     state = 4;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 006D               break;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 006E         }
;PCODE: $000000CB VOL: 0
; 0000 006F 
; 0000 0070         if(state == 2)
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0071             cooler_on(300);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0072         if(state == 4)
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0073             cooler_on(200);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0074         if(state == 5)
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0075             cooler_on(100);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0076         if(state == 3)
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0077             heater_on(100);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0078 
; 0000 0079         lcd_gotoxy(0, 0);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 007A         sprintf(buffer, "%d", adc0);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 007B         lcd_puts(buffer);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 007C         lcd_putchar(0xDF);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 007D         lcd_putchar('C');
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 007E     }
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 007F }
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
