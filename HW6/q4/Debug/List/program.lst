
AVRASM ver. 2.1.30  E:\desk\University\00011-MP (Rizpar)\HW6\q4\Debug\List\program.asm Wed Jan 26 19:06:29 2022

E:\desk\University\00011-MP (Rizpar)\HW6\q4\Debug\List\program.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\desk\University\00011-MP (Rizpar)\HW6\q4\Debug\List\program.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\desk\University\00011-MP (Rizpar)\HW6\q4\Debug\List\program.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\desk\University\00011-MP (Rizpar)\HW6\q4\Debug\List\program.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\desk\University\00011-MP (Rizpar)\HW6\q4\Debug\List\program.asm(1092): warning: Register r8 already defined by the .DEF directive
E:\desk\University\00011-MP (Rizpar)\HW6\q4\Debug\List\program.asm(1093): warning: Register r9 already defined by the .DEF directive
E:\desk\University\00011-MP (Rizpar)\HW6\q4\Debug\List\program.asm(1094): warning: Register r10 already defined by the .DEF directive
E:\desk\University\00011-MP (Rizpar)\HW6\q4\Debug\List\program.asm(1095): warning: Register r11 already defined by the .DEF directive
E:\desk\University\00011-MP (Rizpar)\HW6\q4\Debug\List\program.asm(1096): warning: Register r12 already defined by the .DEF directive
E:\desk\University\00011-MP (Rizpar)\HW6\q4\Debug\List\program.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _check_sum=R4
                 	.DEF _check_sum_msb=R5
                 	.DEF _temp_int=R6
                 	.DEF _temp_int_msb=R7
                 	.DEF _temp_dec=R8
                 	.DEF _temp_dec_msb=R9
                 	.DEF _hum_int=R10
                 	.DEF _hum_int_msb=R11
                 	.DEF _hum_dec=R12
                 	.DEF _hum_dec_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6425
000034 2525
000035 0020      	.DB  0x25,0x64,0x25,0x25,0x20,0x0
                 _0x2000003:
000036 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000037 0002      	.DW  0x02
000038 0280      	.DW  __base_y_G100
000039 006c      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00003a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003b 94f8      	CLI
00003c 27ee      	CLR  R30
00003d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003e e0f1      	LDI  R31,1
00003f bffb      	OUT  GICR,R31
000040 bfeb      	OUT  GICR,R30
000041 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e6ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 940c 0093 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;void request(void) {
                 ; 0000 0006 void request(void) {
                 
                 	.CSEG
                 _request:
                 ; .FSTART _request
                 ; 0000 0007     DDRD.0 = 1;
000068 9a88      	SBI  0x11,0
                 ; 0000 0008     PORTD.0 = 0;
000069 9890      	CBI  0x12,0
                 ; 0000 0009     delay_ms(20);
00006a e1a4      	LDI  R26,LOW(20)
00006b e0b0      	LDI  R27,0
00006c 940e 0375 	CALL _delay_ms
                 ; 0000 000A     PORTD.0 = 1;
00006e 9a90      	SBI  0x12,0
                 ; 0000 000B }
00006f 9508      	RET
                 ; .FEND
                 ;
                 ;void response(void) {
                 ; 0000 000D void response(void) {
                 _response:
                 ; .FSTART _response
                 ; 0000 000E     DDRD.0 = 0;
000070 9888      	CBI  0x11,0
                 ; 0000 000F     while(PIND.0 == 1);
                 _0xB:
000071 9980      	SBIC 0x10,0
000072 cffe      	RJMP _0xB
                 ; 0000 0010     while(PIND.0 == 0);
                 _0xE:
000073 9b80      	SBIS 0x10,0
000074 cffe      	RJMP _0xE
                 ; 0000 0011     while(PIND.0 == 1);
                 _0x11:
000075 9980      	SBIC 0x10,0
000076 cffe      	RJMP _0x11
                 ; 0000 0012 }
000077 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char read_dht11(void) {
                 ; 0000 0014 unsigned char read_dht11(void) {
                 _read_dht11:
                 ; .FSTART _read_dht11
                 ; 0000 0015     char counter_bit = 0, data = 0;
                 ; 0000 0016     while(counter_bit < 8) {
000078 931a      	ST   -Y,R17
000079 930a      	ST   -Y,R16
                 ;	counter_bit -> R17
                 ;	data -> R16
00007a e010      	LDI  R17,0
00007b e000      	LDI  R16,0
                 _0x14:
00007c 3018      	CPI  R17,8
00007d f488      	BRSH _0x16
                 ; 0000 0017         counter_bit++;
00007e 5f1f      	SUBI R17,-1
                 ; 0000 0018         while(PIND.0==0);
                 _0x17:
00007f 9b80      	SBIS 0x10,0
000080 cffe      	RJMP _0x17
                 ; 0000 0019         delay_us(30);
                +
000081 e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
000082 958a     +DEC R24
000083 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0000 001A 
                 ; 0000 001B         if(PIND.0==1)
000084 9b80      	SBIS 0x10,0
000085 c005      	RJMP _0x1A
                 ; 0000 001C             data=(data<<1)|(0x01);
000086 2fe0      	MOV  R30,R16
000087 0fee      	LSL  R30
000088 60e1      	ORI  R30,1
000089 2f0e      	MOV  R16,R30
                 ; 0000 001D         else
00008a c001      	RJMP _0x1B
                 _0x1A:
                 ; 0000 001E             data=data<<1;
00008b 0f00      	LSL  R16
                 ; 0000 001F 
                 ; 0000 0020         while(PIND.0==1);
                 _0x1B:
                 _0x1C:
00008c 9980      	SBIC 0x10,0
00008d cffe      	RJMP _0x1C
                 ; 0000 0021     }
00008e cfed      	RJMP _0x14
                 _0x16:
                 ; 0000 0022 
                 ; 0000 0023     return data;
00008f 2fe0      	MOV  R30,R16
000090 9109      	LD   R16,Y+
000091 9119      	LD   R17,Y+
000092 9508      	RET
                 ; 0000 0024 }
                 ; .FEND
                 ;
                 ;char buffer[32];
                 ;int check_sum;
                 ;int temp_int, temp_dec;
                 ;int hum_int, hum_dec;
                 ;
                 ;void main(void) {
                 ; 0000 002B void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 002C     DDRB.0 = 1;
000093 9ab8      	SBI  0x17,0
                 ; 0000 002D     PORTB.0 = 0;
000094 98c0      	CBI  0x18,0
                 ; 0000 002E 
                 ; 0000 002F     lcd_init(16);
000095 e1a0      	LDI  R26,LOW(16)
000096 d0b4      	RCALL _lcd_init
                 ; 0000 0030     lcd_clear();
000097 d074      	RCALL _lcd_clear
                 ; 0000 0031 
                 ; 0000 0032     while (1) {
                 _0x23:
                 ; 0000 0033 
                 ; 0000 0034         request();
000098 dfcf      	RCALL _request
                 ; 0000 0035         response();
000099 dfd6      	RCALL _response
                 ; 0000 0036 
                 ; 0000 0037         hum_int = read_dht11();
00009a dfdd      	RCALL _read_dht11
00009b 2eae      	MOV  R10,R30
00009c 24bb      	CLR  R11
                 ; 0000 0038         hum_dec = read_dht11();
00009d dfda      	RCALL _read_dht11
00009e 2ece      	MOV  R12,R30
00009f 24dd      	CLR  R13
                 ; 0000 0039         temp_int = read_dht11();
0000a0 dfd7      	RCALL _read_dht11
0000a1 2e6e      	MOV  R6,R30
0000a2 2477      	CLR  R7
                 ; 0000 003A         temp_dec = read_dht11();
0000a3 dfd4      	RCALL _read_dht11
0000a4 2e8e      	MOV  R8,R30
0000a5 2499      	CLR  R9
                 ; 0000 003B         check_sum = read_dht11();
0000a6 dfd1      	RCALL _read_dht11
0000a7 2e4e      	MOV  R4,R30
0000a8 2455      	CLR  R5
                 ; 0000 003C 
                 ; 0000 003D         if(hum_int + hum_dec + temp_int + temp_dec - check_sum)
0000a9 01f6      	MOVW R30,R12
0000aa 0dea      	ADD  R30,R10
0000ab 1dfb      	ADC  R31,R11
0000ac 0de6      	ADD  R30,R6
0000ad 1df7      	ADC  R31,R7
0000ae 0de8      	ADD  R30,R8
0000af 1df9      	ADC  R31,R9
0000b0 19e4      	SUB  R30,R4
0000b1 09f5      	SBC  R31,R5
0000b2 f729      	BRNE _0x23
                 ; 0000 003E             continue;
                 ; 0000 003F 
                 ; 0000 0040         lcd_gotoxy(0, 0);
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 93ea      	ST   -Y,R30
0000b5 e0a0      	LDI  R26,LOW(0)
0000b6 d044      	RCALL _lcd_gotoxy
                 ; 0000 0041         sprintf(buffer, "%d%% ", hum_int);
0000b7 e6e0      	LDI  R30,LOW(_buffer)
0000b8 e0f2      	LDI  R31,HIGH(_buffer)
0000b9 93fa      	ST   -Y,R31
0000ba 93ea      	ST   -Y,R30
                +
0000bb e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000bc e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000bd 93fa      	ST   -Y,R31
0000be 93ea      	ST   -Y,R30
0000bf 01f5      	MOVW R30,R10
0000c0 940e 0387 	CALL __CWD1
0000c2 940e 0394 	CALL __PUTPARD1
0000c4 e084      	LDI  R24,4
0000c5 940e 02ee 	CALL _sprintf
0000c7 9628      	ADIW R28,8
                 ; 0000 0042         lcd_puts(buffer);
0000c8 e6a0      	LDI  R26,LOW(_buffer)
0000c9 e0b2      	LDI  R27,HIGH(_buffer)
0000ca d06f      	RCALL _lcd_puts
                 ; 0000 0043 
                 ; 0000 0044         if(hum_int > 40 && hum_int < 60)
0000cb e2e8      	LDI  R30,LOW(40)
0000cc e0f0      	LDI  R31,HIGH(40)
0000cd 15ea      	CP   R30,R10
0000ce 05fb      	CPC  R31,R11
0000cf f42c      	BRGE _0x28
0000d0 e3ec      	LDI  R30,LOW(60)
0000d1 e0f0      	LDI  R31,HIGH(60)
0000d2 16ae      	CP   R10,R30
0000d3 06bf      	CPC  R11,R31
0000d4 f00c      	BRLT _0x29
                 _0x28:
0000d5 c002      	RJMP _0x27
                 _0x29:
                 ; 0000 0045             PORTB.0=0;
0000d6 98c0      	CBI  0x18,0
                 ; 0000 0046         else
0000d7 c001      	RJMP _0x2C
                 _0x27:
                 ; 0000 0047             PORTB.0=1;
0000d8 9ac0      	SBI  0x18,0
                 ; 0000 0048     }
                 _0x2C:
0000d9 cfbe      	RJMP _0x23
                 ; 0000 0049 }
                 _0x2F:
0000da cfff      	RJMP _0x2F
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000db 93aa      	ST   -Y,R26
0000dc b3e5      	IN   R30,0x15
0000dd 70ef      	ANDI R30,LOW(0xF)
0000de 2fae      	MOV  R26,R30
0000df 81e8      	LD   R30,Y
0000e0 7fe0      	ANDI R30,LOW(0xF0)
0000e1 2bea      	OR   R30,R26
0000e2 bbe5      	OUT  0x15,R30
                +
0000e3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000e4 958a     +DEC R24
0000e5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000e6 9aaa      	SBI  0x15,2
                +
0000e7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000e8 958a     +DEC R24
0000e9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000ea 98aa      	CBI  0x15,2
                +
0000eb e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ec 958a     +DEC R24
0000ed f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000ee c089      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000ef 93aa      	ST   -Y,R26
0000f0 81a8      	LD   R26,Y
0000f1 dfe9      	RCALL __lcd_write_nibble_G100
0000f2 81e8          ld    r30,y
0000f3 95e2          swap  r30
0000f4 83e8          st    y,r30
0000f5 81a8      	LD   R26,Y
0000f6 dfe4      	RCALL __lcd_write_nibble_G100
                +
0000f7 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000f8 958a     +DEC R24
0000f9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0000fa c07d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000fb 93aa      	ST   -Y,R26
0000fc 81e8      	LD   R30,Y
0000fd e0f0      	LDI  R31,0
0000fe 58e0      	SUBI R30,LOW(-__base_y_G100)
0000ff 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000100 81e0      	LD   R30,Z
000101 81a9      	LDD  R26,Y+1
000102 0fae      	ADD  R26,R30
000103 dfeb      	RCALL __lcd_write_data
000104 81e9      	LDD  R30,Y+1
000105 93e0 0284 	STS  __lcd_x,R30
000107 81e8      	LD   R30,Y
000108 93e0 0285 	STS  __lcd_y,R30
00010a 9622      	ADIW R28,2
00010b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00010c e0a2      	LDI  R26,LOW(2)
00010d 940e 033b 	CALL SUBOPT_0x0
00010f e0ac      	LDI  R26,LOW(12)
000110 dfde      	RCALL __lcd_write_data
000111 e0a1      	LDI  R26,LOW(1)
000112 940e 033b 	CALL SUBOPT_0x0
000114 e0e0      	LDI  R30,LOW(0)
000115 93e0 0285 	STS  __lcd_y,R30
000117 93e0 0284 	STS  __lcd_x,R30
000119 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00011a 93aa      	ST   -Y,R26
00011b 81a8      	LD   R26,Y
00011c 30aa      	CPI  R26,LOW(0xA)
00011d f031      	BREQ _0x2000005
00011e 91e0 0286 	LDS  R30,__lcd_maxx
000120 91a0 0284 	LDS  R26,__lcd_x
000122 17ae      	CP   R26,R30
000123 f060      	BRLO _0x2000004
                 _0x2000005:
000124 e0e0      	LDI  R30,LOW(0)
000125 93ea      	ST   -Y,R30
000126 91a0 0285 	LDS  R26,__lcd_y
000128 5faf      	SUBI R26,-LOW(1)
000129 93a0 0285 	STS  __lcd_y,R26
00012b dfcf      	RCALL _lcd_gotoxy
00012c 81a8      	LD   R26,Y
00012d 30aa      	CPI  R26,LOW(0xA)
00012e f409      	BRNE _0x2000007
00012f c048      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000130 91e0 0284 	LDS  R30,__lcd_x
000132 5fef      	SUBI R30,-LOW(1)
000133 93e0 0284 	STS  __lcd_x,R30
000135 9aa8      	SBI  0x15,0
000136 81a8      	LD   R26,Y
000137 dfb7      	RCALL __lcd_write_data
000138 98a8      	CBI  0x15,0
000139 c03e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00013a 93ba      	ST   -Y,R27
00013b 93aa      	ST   -Y,R26
00013c 931a      	ST   -Y,R17
                 _0x2000008:
00013d 81a9      	LDD  R26,Y+1
00013e 81ba      	LDD  R27,Y+1+1
00013f 91ed      	LD   R30,X+
000140 83a9      	STD  Y+1,R26
000141 83ba      	STD  Y+1+1,R27
000142 2f1e      	MOV  R17,R30
000143 30e0      	CPI  R30,0
000144 f019      	BREQ _0x200000A
000145 2fa1      	MOV  R26,R17
000146 dfd3      	RCALL _lcd_putchar
000147 cff5      	RJMP _0x2000008
                 _0x200000A:
000148 8118      	LDD  R17,Y+0
000149 9623      	ADIW R28,3
00014a 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00014b 93aa      	ST   -Y,R26
00014c b3e4      	IN   R30,0x14
00014d 6fe0      	ORI  R30,LOW(0xF0)
00014e bbe4      	OUT  0x14,R30
00014f 9aa2      	SBI  0x14,2
000150 9aa0      	SBI  0x14,0
000151 9aa1      	SBI  0x14,1
000152 98aa      	CBI  0x15,2
000153 98a8      	CBI  0x15,0
000154 98a9      	CBI  0x15,1
000155 81e8      	LD   R30,Y
000156 93e0 0286 	STS  __lcd_maxx,R30
000158 58e0      	SUBI R30,-LOW(128)
                +
000159 93e0 0282+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00015b 81e8      	LD   R30,Y
00015c 54e0      	SUBI R30,-LOW(192)
                +
00015d 93e0 0283+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00015f e1a4      	LDI  R26,LOW(20)
000160 e0b0      	LDI  R27,0
000161 940e 0375 	CALL _delay_ms
000163 940e 0341 	CALL SUBOPT_0x1
000165 940e 0341 	CALL SUBOPT_0x1
000167 940e 0341 	CALL SUBOPT_0x1
000169 e2a0      	LDI  R26,LOW(32)
00016a df70      	RCALL __lcd_write_nibble_G100
                +
00016b ec88     +LDI R24 , LOW ( 200 )
00016c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00016d 9701     +SBIW R24 , 1
00016e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00016f e2a8      	LDI  R26,LOW(40)
000170 df7e      	RCALL __lcd_write_data
000171 e0a4      	LDI  R26,LOW(4)
000172 df7c      	RCALL __lcd_write_data
000173 e8a5      	LDI  R26,LOW(133)
000174 df7a      	RCALL __lcd_write_data
000175 e0a6      	LDI  R26,LOW(6)
000176 df78      	RCALL __lcd_write_data
000177 df94      	RCALL _lcd_clear
                 _0x2080002:
000178 9621      	ADIW R28,1
000179 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00017a 93ba      	ST   -Y,R27
00017b 93aa      	ST   -Y,R26
00017c 931a      	ST   -Y,R17
00017d 930a      	ST   -Y,R16
00017e 81aa      	LDD  R26,Y+2
00017f 81bb      	LDD  R27,Y+2+1
000180 9612      	ADIW R26,2
000181 940e 038c 	CALL __GETW1P
000183 9730      	SBIW R30,0
000184 f159      	BREQ _0x2020010
000185 81aa      	LDD  R26,Y+2
000186 81bb      	LDD  R27,Y+2+1
000187 9614      	ADIW R26,4
000188 940e 038c 	CALL __GETW1P
00018a 018f      	MOVW R16,R30
00018b 9730      	SBIW R30,0
00018c f061      	BREQ _0x2020012
                +
00018d 3002     +CPI R16 , LOW ( 2 )
00018e e0e0     +LDI R30 , HIGH ( 2 )
00018f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000190 f098      	BRLO _0x2020013
000191 01f8      	MOVW R30,R16
000192 9731      	SBIW R30,1
000193 018f      	MOVW R16,R30
                +
000194 81aa     +LDD R26 , Y + 2
000195 81bb     +LDD R27 , Y + 2 + 1
000196 9614     +ADIW R26 , 4
000197 93ed     +ST X + , R30
000198 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000199 81aa      	LDD  R26,Y+2
00019a 81bb      	LDD  R27,Y+2+1
00019b 9612      	ADIW R26,2
00019c 91ed      	LD   R30,X+
00019d 91fd      	LD   R31,X+
00019e 9631      	ADIW R30,1
00019f 93fe      	ST   -X,R31
0001a0 93ee      	ST   -X,R30
0001a1 9731      	SBIW R30,1
0001a2 81ac      	LDD  R26,Y+4
0001a3 83a0      	STD  Z+0,R26
                 _0x2020013:
0001a4 81aa      	LDD  R26,Y+2
0001a5 81bb      	LDD  R27,Y+2+1
0001a6 940e 038c 	CALL __GETW1P
0001a8 23ff      	TST  R31
0001a9 f02a      	BRMI _0x2020014
0001aa 91ed      	LD   R30,X+
0001ab 91fd      	LD   R31,X+
0001ac 9631      	ADIW R30,1
0001ad 93fe      	ST   -X,R31
0001ae 93ee      	ST   -X,R30
                 _0x2020014:
0001af c006      	RJMP _0x2020015
                 _0x2020010:
0001b0 81aa      	LDD  R26,Y+2
0001b1 81bb      	LDD  R27,Y+2+1
0001b2 efef      	LDI  R30,LOW(65535)
0001b3 efff      	LDI  R31,HIGH(65535)
0001b4 93ed      	ST   X+,R30
0001b5 93fc      	ST   X,R31
                 _0x2020015:
0001b6 8119      	LDD  R17,Y+1
0001b7 8108      	LDD  R16,Y+0
0001b8 9625      	ADIW R28,5
0001b9 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001ba 93ba      	ST   -Y,R27
0001bb 93aa      	ST   -Y,R26
0001bc 9726      	SBIW R28,6
0001bd 940e 0399 	CALL __SAVELOCR6
0001bf e010      	LDI  R17,0
0001c0 85ac      	LDD  R26,Y+12
0001c1 85bd      	LDD  R27,Y+12+1
0001c2 e0e0      	LDI  R30,LOW(0)
0001c3 e0f0      	LDI  R31,HIGH(0)
0001c4 93ed      	ST   X+,R30
0001c5 93fc      	ST   X,R31
                 _0x2020016:
0001c6 89ea      	LDD  R30,Y+18
0001c7 89fb      	LDD  R31,Y+18+1
0001c8 9631      	ADIW R30,1
0001c9 8bea      	STD  Y+18,R30
0001ca 8bfb      	STD  Y+18+1,R31
0001cb 9731      	SBIW R30,1
0001cc 91e4      	LPM  R30,Z
0001cd 2f2e      	MOV  R18,R30
0001ce 30e0      	CPI  R30,0
0001cf f409      	BRNE PC+2
0001d0 c115      	RJMP _0x2020018
0001d1 2fe1      	MOV  R30,R17
0001d2 30e0      	CPI  R30,0
0001d3 f439      	BRNE _0x202001C
0001d4 3225      	CPI  R18,37
0001d5 f411      	BRNE _0x202001D
0001d6 e011      	LDI  R17,LOW(1)
0001d7 c002      	RJMP _0x202001E
                 _0x202001D:
0001d8 940e 0349 	CALL SUBOPT_0x2
                 _0x202001E:
0001da c10a      	RJMP _0x202001B
                 _0x202001C:
0001db 30e1      	CPI  R30,LOW(0x1)
0001dc f4a9      	BRNE _0x202001F
0001dd 3225      	CPI  R18,37
0001de f419      	BRNE _0x2020020
0001df 940e 0349 	CALL SUBOPT_0x2
0001e1 c102      	RJMP _0x20200CC
                 _0x2020020:
0001e2 e012      	LDI  R17,LOW(2)
0001e3 e040      	LDI  R20,LOW(0)
0001e4 e000      	LDI  R16,LOW(0)
0001e5 322d      	CPI  R18,45
0001e6 f411      	BRNE _0x2020021
0001e7 e001      	LDI  R16,LOW(1)
0001e8 c0fc      	RJMP _0x202001B
                 _0x2020021:
0001e9 322b      	CPI  R18,43
0001ea f411      	BRNE _0x2020022
0001eb e24b      	LDI  R20,LOW(43)
0001ec c0f8      	RJMP _0x202001B
                 _0x2020022:
0001ed 3220      	CPI  R18,32
0001ee f411      	BRNE _0x2020023
0001ef e240      	LDI  R20,LOW(32)
0001f0 c0f4      	RJMP _0x202001B
                 _0x2020023:
0001f1 c002      	RJMP _0x2020024
                 _0x202001F:
0001f2 30e2      	CPI  R30,LOW(0x2)
0001f3 f439      	BRNE _0x2020025
                 _0x2020024:
0001f4 e050      	LDI  R21,LOW(0)
0001f5 e013      	LDI  R17,LOW(3)
0001f6 3320      	CPI  R18,48
0001f7 f411      	BRNE _0x2020026
0001f8 6800      	ORI  R16,LOW(128)
0001f9 c0eb      	RJMP _0x202001B
                 _0x2020026:
0001fa c003      	RJMP _0x2020027
                 _0x2020025:
0001fb 30e3      	CPI  R30,LOW(0x3)
0001fc f009      	BREQ PC+2
0001fd c0e7      	RJMP _0x202001B
                 _0x2020027:
0001fe 3320      	CPI  R18,48
0001ff f010      	BRLO _0x202002A
000200 332a      	CPI  R18,58
000201 f008      	BRLO _0x202002B
                 _0x202002A:
000202 c007      	RJMP _0x2020029
                 _0x202002B:
000203 e0aa      	LDI  R26,LOW(10)
000204 9f5a      	MUL  R21,R26
000205 2d50      	MOV  R21,R0
000206 2fe2      	MOV  R30,R18
000207 53e0      	SUBI R30,LOW(48)
000208 0f5e      	ADD  R21,R30
000209 c0db      	RJMP _0x202001B
                 _0x2020029:
00020a 2fe2      	MOV  R30,R18
00020b 36e3      	CPI  R30,LOW(0x63)
00020c f449      	BRNE _0x202002F
00020d 940e 0350 	CALL SUBOPT_0x3
00020f 89e8      	LDD  R30,Y+16
000210 89f9      	LDD  R31,Y+16+1
000211 81a4      	LDD  R26,Z+4
000212 93aa      	ST   -Y,R26
000213 940e 0356 	CALL SUBOPT_0x4
000215 c0ce      	RJMP _0x2020030
                 _0x202002F:
000216 37e3      	CPI  R30,LOW(0x73)
000217 f441      	BRNE _0x2020032
000218 940e 0350 	CALL SUBOPT_0x3
00021a 940e 035c 	CALL SUBOPT_0x5
00021c 940e 0322 	CALL _strlen
00021e 2f1e      	MOV  R17,R30
00021f c00a      	RJMP _0x2020033
                 _0x2020032:
000220 37e0      	CPI  R30,LOW(0x70)
000221 f461      	BRNE _0x2020035
000222 940e 0350 	CALL SUBOPT_0x3
000224 940e 035c 	CALL SUBOPT_0x5
000226 940e 032e 	CALL _strlenf
000228 2f1e      	MOV  R17,R30
000229 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00022a 6002      	ORI  R16,LOW(2)
00022b 770f      	ANDI R16,LOW(127)
00022c e030      	LDI  R19,LOW(0)
00022d c034      	RJMP _0x2020036
                 _0x2020035:
00022e 36e4      	CPI  R30,LOW(0x64)
00022f f011      	BREQ _0x2020039
000230 36e9      	CPI  R30,LOW(0x69)
000231 f411      	BRNE _0x202003A
                 _0x2020039:
000232 6004      	ORI  R16,LOW(4)
000233 c002      	RJMP _0x202003B
                 _0x202003A:
000234 37e5      	CPI  R30,LOW(0x75)
000235 f431      	BRNE _0x202003C
                 _0x202003B:
000236 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000237 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000238 83ee      	STD  Y+6,R30
000239 83ff      	STD  Y+6+1,R31
00023a e015      	LDI  R17,LOW(5)
00023b c00c      	RJMP _0x202003D
                 _0x202003C:
00023c 35e8      	CPI  R30,LOW(0x58)
00023d f411      	BRNE _0x202003F
00023e 6008      	ORI  R16,LOW(8)
00023f c003      	RJMP _0x2020040
                 _0x202003F:
000240 37e8      	CPI  R30,LOW(0x78)
000241 f009      	BREQ PC+2
000242 c0a1      	RJMP _0x2020071
                 _0x2020040:
000243 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000244 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000245 83ee      	STD  Y+6,R30
000246 83ff      	STD  Y+6+1,R31
000247 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000248 ff02      	SBRS R16,2
000249 c014      	RJMP _0x2020042
00024a 940e 0350 	CALL SUBOPT_0x3
00024c 940e 0366 	CALL SUBOPT_0x6
00024e 85ab      	LDD  R26,Y+11
00024f 23aa      	TST  R26
000250 f43a      	BRPL _0x2020043
000251 85ea      	LDD  R30,Y+10
000252 85fb      	LDD  R31,Y+10+1
000253 940e 0383 	CALL __ANEGW1
000255 87ea      	STD  Y+10,R30
000256 87fb      	STD  Y+10+1,R31
000257 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000258 3040      	CPI  R20,0
000259 f011      	BREQ _0x2020044
00025a 5f1f      	SUBI R17,-LOW(1)
00025b c001      	RJMP _0x2020045
                 _0x2020044:
00025c 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00025d c004      	RJMP _0x2020046
                 _0x2020042:
00025e 940e 0350 	CALL SUBOPT_0x3
000260 940e 0366 	CALL SUBOPT_0x6
                 _0x2020046:
                 _0x2020036:
000262 fd00      	SBRC R16,0
000263 c011      	RJMP _0x2020047
                 _0x2020048:
000264 1715      	CP   R17,R21
000265 f478      	BRSH _0x202004A
000266 ff07      	SBRS R16,7
000267 c008      	RJMP _0x202004B
000268 ff02      	SBRS R16,2
000269 c004      	RJMP _0x202004C
00026a 7f0b      	ANDI R16,LOW(251)
00026b 2f24      	MOV  R18,R20
00026c 5011      	SUBI R17,LOW(1)
00026d c001      	RJMP _0x202004D
                 _0x202004C:
00026e e320      	LDI  R18,LOW(48)
                 _0x202004D:
00026f c001      	RJMP _0x202004E
                 _0x202004B:
000270 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000271 940e 0349 	CALL SUBOPT_0x2
000273 5051      	SUBI R21,LOW(1)
000274 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000275 2f31      	MOV  R19,R17
000276 ff01      	SBRS R16,1
000277 c017      	RJMP _0x202004F
                 _0x2020050:
000278 3030      	CPI  R19,0
000279 f0a1      	BREQ _0x2020052
00027a ff03      	SBRS R16,3
00027b c006      	RJMP _0x2020053
00027c 81ee      	LDD  R30,Y+6
00027d 81ff      	LDD  R31,Y+6+1
00027e 9125      	LPM  R18,Z+
00027f 83ee      	STD  Y+6,R30
000280 83ff      	STD  Y+6+1,R31
000281 c005      	RJMP _0x2020054
                 _0x2020053:
000282 81ae      	LDD  R26,Y+6
000283 81bf      	LDD  R27,Y+6+1
000284 912d      	LD   R18,X+
000285 83ae      	STD  Y+6,R26
000286 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000287 940e 0349 	CALL SUBOPT_0x2
000289 3050      	CPI  R21,0
00028a f009      	BREQ _0x2020055
00028b 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00028c 5031      	SUBI R19,LOW(1)
00028d cfea      	RJMP _0x2020050
                 _0x2020052:
00028e c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00028f e320      	LDI  R18,LOW(48)
000290 81ee      	LDD  R30,Y+6
000291 81ff      	LDD  R31,Y+6+1
000292 940e 0390 	CALL __GETW1PF
000294 87e8      	STD  Y+8,R30
000295 87f9      	STD  Y+8+1,R31
000296 81ee      	LDD  R30,Y+6
000297 81ff      	LDD  R31,Y+6+1
000298 9632      	ADIW R30,2
000299 83ee      	STD  Y+6,R30
00029a 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00029b 85e8      	LDD  R30,Y+8
00029c 85f9      	LDD  R31,Y+8+1
00029d 85aa      	LDD  R26,Y+10
00029e 85bb      	LDD  R27,Y+10+1
00029f 17ae      	CP   R26,R30
0002a0 07bf      	CPC  R27,R31
0002a1 f050      	BRLO _0x202005C
0002a2 5f2f      	SUBI R18,-LOW(1)
0002a3 85a8      	LDD  R26,Y+8
0002a4 85b9      	LDD  R27,Y+8+1
0002a5 85ea      	LDD  R30,Y+10
0002a6 85fb      	LDD  R31,Y+10+1
0002a7 1bea      	SUB  R30,R26
0002a8 0bfb      	SBC  R31,R27
0002a9 87ea      	STD  Y+10,R30
0002aa 87fb      	STD  Y+10+1,R31
0002ab cfef      	RJMP _0x202005A
                 _0x202005C:
0002ac 332a      	CPI  R18,58
0002ad f028      	BRLO _0x202005D
0002ae ff03      	SBRS R16,3
0002af c002      	RJMP _0x202005E
0002b0 5f29      	SUBI R18,-LOW(7)
0002b1 c001      	RJMP _0x202005F
                 _0x202005E:
0002b2 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002b3 fd04      	SBRC R16,4
0002b4 c01a      	RJMP _0x2020061
0002b5 3321      	CPI  R18,49
0002b6 f420      	BRSH _0x2020063
0002b7 85a8      	LDD  R26,Y+8
0002b8 85b9      	LDD  R27,Y+8+1
0002b9 9711      	SBIW R26,1
0002ba f409      	BRNE _0x2020062
                 _0x2020063:
0002bb c009      	RJMP _0x20200CD
                 _0x2020062:
0002bc 1753      	CP   R21,R19
0002bd f010      	BRLO _0x2020067
0002be ff00      	SBRS R16,0
0002bf c001      	RJMP _0x2020068
                 _0x2020067:
0002c0 c013      	RJMP _0x2020066
                 _0x2020068:
0002c1 e220      	LDI  R18,LOW(32)
0002c2 ff07      	SBRS R16,7
0002c3 c00b      	RJMP _0x2020069
0002c4 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002c5 6100      	ORI  R16,LOW(16)
0002c6 ff02      	SBRS R16,2
0002c7 c007      	RJMP _0x202006A
0002c8 7f0b      	ANDI R16,LOW(251)
0002c9 934a      	ST   -Y,R20
0002ca 940e 0356 	CALL SUBOPT_0x4
0002cc 3050      	CPI  R21,0
0002cd f009      	BREQ _0x202006B
0002ce 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002cf 940e 0349 	CALL SUBOPT_0x2
0002d1 3050      	CPI  R21,0
0002d2 f009      	BREQ _0x202006C
0002d3 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002d4 5031      	SUBI R19,LOW(1)
0002d5 85a8      	LDD  R26,Y+8
0002d6 85b9      	LDD  R27,Y+8+1
0002d7 9712      	SBIW R26,2
0002d8 f008      	BRLO _0x2020059
0002d9 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0002da ff00      	SBRS R16,0
0002db c008      	RJMP _0x202006D
                 _0x202006E:
0002dc 3050      	CPI  R21,0
0002dd f031      	BREQ _0x2020070
0002de 5051      	SUBI R21,LOW(1)
0002df e2e0      	LDI  R30,LOW(32)
0002e0 93ea      	ST   -Y,R30
0002e1 940e 0356 	CALL SUBOPT_0x4
0002e3 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002e4 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002e5 cee0      	RJMP _0x2020016
                 _0x2020018:
0002e6 85ac      	LDD  R26,Y+12
0002e7 85bd      	LDD  R27,Y+12+1
0002e8 940e 038c 	CALL __GETW1P
0002ea 940e 03a0 	CALL __LOADLOCR6
0002ec 9664      	ADIW R28,20
0002ed 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002ee 92ff      	PUSH R15
0002ef 2ef8      	MOV  R15,R24
0002f0 9726      	SBIW R28,6
0002f1 940e 039b 	CALL __SAVELOCR4
0002f3 940e 036e 	CALL SUBOPT_0x7
0002f5 9730      	SBIW R30,0
0002f6 f419      	BRNE _0x2020072
0002f7 efef      	LDI  R30,LOW(65535)
0002f8 efff      	LDI  R31,HIGH(65535)
0002f9 c023      	RJMP _0x2080001
                 _0x2020072:
0002fa 01de      	MOVW R26,R28
0002fb 9616      	ADIW R26,6
0002fc 940e 037f 	CALL __ADDW2R15
0002fe 018d      	MOVW R16,R26
0002ff 940e 036e 	CALL SUBOPT_0x7
000301 83ee      	STD  Y+6,R30
000302 83ff      	STD  Y+6+1,R31
000303 e0e0      	LDI  R30,LOW(0)
000304 87e8      	STD  Y+8,R30
000305 87e9      	STD  Y+8+1,R30
000306 01de      	MOVW R26,R28
000307 961a      	ADIW R26,10
000308 940e 037f 	CALL __ADDW2R15
00030a 940e 038c 	CALL __GETW1P
00030c 93fa      	ST   -Y,R31
00030d 93ea      	ST   -Y,R30
00030e 931a      	ST   -Y,R17
00030f 930a      	ST   -Y,R16
000310 e7ea      	LDI  R30,LOW(_put_buff_G101)
000311 e0f1      	LDI  R31,HIGH(_put_buff_G101)
000312 93fa      	ST   -Y,R31
000313 93ea      	ST   -Y,R30
000314 01de      	MOVW R26,R28
000315 961a      	ADIW R26,10
000316 dea3      	RCALL __print_G101
000317 019f      	MOVW R18,R30
000318 81ae      	LDD  R26,Y+6
000319 81bf      	LDD  R27,Y+6+1
00031a e0e0      	LDI  R30,LOW(0)
00031b 93ec      	ST   X,R30
00031c 01f9      	MOVW R30,R18
                 _0x2080001:
00031d 940e 03a2 	CALL __LOADLOCR4
00031f 962a      	ADIW R28,10
000320 90ff      	POP  R15
000321 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000322 93ba      	ST   -Y,R27
000323 93aa      	ST   -Y,R26
000324 91a9          ld   r26,y+
000325 91b9          ld   r27,y+
000326 27ee          clr  r30
000327 27ff          clr  r31
                 strlen0:
000328 916d          ld   r22,x+
000329 2366          tst  r22
00032a f011          breq strlen1
00032b 9631          adiw r30,1
00032c cffb          rjmp strlen0
                 strlen1:
00032d 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00032e 93ba      	ST   -Y,R27
00032f 93aa      	ST   -Y,R26
000330 27aa          clr  r26
000331 27bb          clr  r27
000332 91e9          ld   r30,y+
000333 91f9          ld   r31,y+
                 strlenf0:
000334 9005      	lpm  r0,z+
000335 2000          tst  r0
000336 f011          breq strlenf1
000337 9611          adiw r26,1
000338 cffb          rjmp strlenf0
                 strlenf1:
000339 01fd          movw r30,r26
00033a 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _buffer:
000260           	.BYTE 0x20
                 __base_y_G100:
000280           	.BYTE 0x4
                 __lcd_x:
000284           	.BYTE 0x1
                 __lcd_y:
000285           	.BYTE 0x1
                 __lcd_maxx:
000286           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00033b 940e 00ef 	CALL __lcd_write_data
00033d e0a3      	LDI  R26,LOW(3)
00033e e0b0      	LDI  R27,0
00033f 940c 0375 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000341 e3a0      	LDI  R26,LOW(48)
000342 940e 00db 	CALL __lcd_write_nibble_G100
                +
000344 ec88     +LDI R24 , LOW ( 200 )
000345 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000346 9701     +SBIW R24 , 1
000347 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000348 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
000349 932a      	ST   -Y,R18
00034a 85ad      	LDD  R26,Y+13
00034b 85be      	LDD  R27,Y+13+1
00034c 85ef      	LDD  R30,Y+15
00034d 89f8      	LDD  R31,Y+15+1
00034e 9509      	ICALL
00034f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000350 89e8      	LDD  R30,Y+16
000351 89f9      	LDD  R31,Y+16+1
000352 9734      	SBIW R30,4
000353 8be8      	STD  Y+16,R30
000354 8bf9      	STD  Y+16+1,R31
000355 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000356 85ad      	LDD  R26,Y+13
000357 85be      	LDD  R27,Y+13+1
000358 85ef      	LDD  R30,Y+15
000359 89f8      	LDD  R31,Y+15+1
00035a 9509      	ICALL
00035b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
00035c 89a8      	LDD  R26,Y+16
00035d 89b9      	LDD  R27,Y+16+1
00035e 9614      	ADIW R26,4
00035f 940e 038c 	CALL __GETW1P
000361 83ee      	STD  Y+6,R30
000362 83ff      	STD  Y+6+1,R31
000363 81ae      	LDD  R26,Y+6
000364 81bf      	LDD  R27,Y+6+1
000365 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000366 89a8      	LDD  R26,Y+16
000367 89b9      	LDD  R27,Y+16+1
000368 9614      	ADIW R26,4
000369 940e 038c 	CALL __GETW1P
00036b 87ea      	STD  Y+10,R30
00036c 87fb      	STD  Y+10+1,R31
00036d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00036e 01de      	MOVW R26,R28
00036f 961c      	ADIW R26,12
000370 940e 037f 	CALL __ADDW2R15
000372 940e 038c 	CALL __GETW1P
000374 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000375 9610      	adiw r26,0
000376 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000377 ed80     +LDI R24 , LOW ( 0x7D0 )
000378 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000379 9701     +SBIW R24 , 1
00037a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00037b 95a8      	wdr
00037c 9711      	sbiw r26,1
00037d f7c9      	brne __delay_ms0
                 __delay_ms1:
00037e 9508      	ret
                 
                 __ADDW2R15:
00037f 2400      	CLR  R0
000380 0daf      	ADD  R26,R15
000381 1db0      	ADC  R27,R0
000382 9508      	RET
                 
                 __ANEGW1:
000383 95f1      	NEG  R31
000384 95e1      	NEG  R30
000385 40f0      	SBCI R31,0
000386 9508      	RET
                 
                 __CWD1:
000387 2f6f      	MOV  R22,R31
000388 0f66      	ADD  R22,R22
000389 0b66      	SBC  R22,R22
00038a 2f76      	MOV  R23,R22
00038b 9508      	RET
                 
                 __GETW1P:
00038c 91ed      	LD   R30,X+
00038d 91fc      	LD   R31,X
00038e 9711      	SBIW R26,1
00038f 9508      	RET
                 
                 __GETW1PF:
000390 9005      	LPM  R0,Z+
000391 91f4      	LPM  R31,Z
000392 2de0      	MOV  R30,R0
000393 9508      	RET
                 
                 __PUTPARD1:
000394 937a      	ST   -Y,R23
000395 936a      	ST   -Y,R22
000396 93fa      	ST   -Y,R31
000397 93ea      	ST   -Y,R30
000398 9508      	RET
                 
                 __SAVELOCR6:
000399 935a      	ST   -Y,R21
                 __SAVELOCR5:
00039a 934a      	ST   -Y,R20
                 __SAVELOCR4:
00039b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00039c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00039d 931a      	ST   -Y,R17
00039e 930a      	ST   -Y,R16
00039f 9508      	RET
                 
                 __LOADLOCR6:
0003a0 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003a1 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003a2 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003a3 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003a4 8119      	LDD  R17,Y+1
0003a5 8108      	LD   R16,Y
0003a6 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   2 r5 :   2 r6 :   2 r7 :   2 
r8 :   2 r9 :   2 r10:   5 r11:   4 r12:   2 r13:   1 r14:   0 r15:   4 
r16:  41 r17:  29 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  25 r25:   5 r26: 102 r27:  38 r28:  14 r29:   1 r30: 176 r31:  66 
x  :  23 y  : 169 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   7 
adiw  :  24 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   1 brmi  :   1 brne  :  32 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  50 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   6 cpc   :   4 cpi   :  34 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   0 jmp   :  23 ld    :  28 ldd   :  75 ldi   :  94 
lds   :   4 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  24 movw  :  16 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :   8 pop   :   1 push  :   1 rcall :  25 ret   :  28 
reti  :   0 rjmp  :  69 rol   :   0 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :   9 sbic  :   3 sbis  :   3 sbiw  :  19 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  61 std   :  31 sts   :   9 sub   :   2 subi  :  19 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 57 out of 116 (49.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00074e   1836     34   1870   32768   5.7%
[.dseg] 0x000060 0x000287      0     39     39    2048   1.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
